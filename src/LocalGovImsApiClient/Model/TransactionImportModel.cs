/*
 * LocalGovImsApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LocalGovImsApiClient.Client.OpenAPIDateConverter;

namespace LocalGovImsApiClient.Model
{
    /// <summary>
    /// TransactionImportModel
    /// </summary>
    [DataContract(Name = "TransactionImportModel")]
    public partial class TransactionImportModel : IEquatable<TransactionImportModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionImportModel" /> class.
        /// </summary>
        /// <param name="importTypeId">importTypeId.</param>
        /// <param name="notes">notes.</param>
        /// <param name="numberOfRows">numberOfRows.</param>
        /// <param name="rows">rows.</param>
        /// <param name="errors">errors.</param>
        public TransactionImportModel(int importTypeId = default(int), string notes = default(string), int numberOfRows = default(int), List<ProcessedTransactionModel> rows = default(List<ProcessedTransactionModel>), List<string> errors = default(List<string>))
        {
            this.ImportTypeId = importTypeId;
            this.Notes = notes;
            this.NumberOfRows = numberOfRows;
            this.Rows = rows;
            this.Errors = errors;
        }

        /// <summary>
        /// Gets or Sets ImportTypeId
        /// </summary>
        [DataMember(Name = "ImportTypeId", EmitDefaultValue = false)]
        public int ImportTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "Notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfRows
        /// </summary>
        [DataMember(Name = "NumberOfRows", EmitDefaultValue = false)]
        public int NumberOfRows { get; set; }

        /// <summary>
        /// Gets or Sets Rows
        /// </summary>
        [DataMember(Name = "Rows", EmitDefaultValue = true)]
        public List<ProcessedTransactionModel> Rows { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "Errors", EmitDefaultValue = true)]
        public List<string> Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionImportModel {\n");
            sb.Append("  ImportTypeId: ").Append(ImportTypeId).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  NumberOfRows: ").Append(NumberOfRows).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionImportModel);
        }

        /// <summary>
        /// Returns true if TransactionImportModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionImportModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionImportModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ImportTypeId == input.ImportTypeId ||
                    this.ImportTypeId.Equals(input.ImportTypeId)
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.NumberOfRows == input.NumberOfRows ||
                    this.NumberOfRows.Equals(input.NumberOfRows)
                ) && 
                (
                    this.Rows == input.Rows ||
                    this.Rows != null &&
                    input.Rows != null &&
                    this.Rows.SequenceEqual(input.Rows)
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ImportTypeId.GetHashCode();
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberOfRows.GetHashCode();
                if (this.Rows != null)
                {
                    hashCode = (hashCode * 59) + this.Rows.GetHashCode();
                }
                if (this.Errors != null)
                {
                    hashCode = (hashCode * 59) + this.Errors.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
