/*
 * LocalGovImsApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LocalGovImsApiClient.Client.OpenAPIDateConverter;

namespace LocalGovImsApiClient.Model
{
    /// <summary>
    /// MethodOfPaymentModel
    /// </summary>
    [DataContract(Name = "MethodOfPaymentModel")]
    public partial class MethodOfPaymentModel : IEquatable<MethodOfPaymentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MethodOfPaymentModel" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="name">name.</param>
        /// <param name="maximumAmount">maximumAmount.</param>
        /// <param name="minimumAmount">minimumAmount.</param>
        /// <param name="disabled">disabled.</param>
        public MethodOfPaymentModel(string code = default(string), string name = default(string), decimal maximumAmount = default(decimal), decimal minimumAmount = default(decimal), bool disabled = default(bool))
        {
            this.Code = code;
            this.Name = name;
            this.MaximumAmount = maximumAmount;
            this.MinimumAmount = minimumAmount;
            this.Disabled = disabled;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "Code", EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets MaximumAmount
        /// </summary>
        [DataMember(Name = "MaximumAmount", EmitDefaultValue = false)]
        public decimal MaximumAmount { get; set; }

        /// <summary>
        /// Gets or Sets MinimumAmount
        /// </summary>
        [DataMember(Name = "MinimumAmount", EmitDefaultValue = false)]
        public decimal MinimumAmount { get; set; }

        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name = "Disabled", EmitDefaultValue = true)]
        public bool Disabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MethodOfPaymentModel {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MaximumAmount: ").Append(MaximumAmount).Append("\n");
            sb.Append("  MinimumAmount: ").Append(MinimumAmount).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MethodOfPaymentModel);
        }

        /// <summary>
        /// Returns true if MethodOfPaymentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of MethodOfPaymentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MethodOfPaymentModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MaximumAmount == input.MaximumAmount ||
                    this.MaximumAmount.Equals(input.MaximumAmount)
                ) && 
                (
                    this.MinimumAmount == input.MinimumAmount ||
                    this.MinimumAmount.Equals(input.MinimumAmount)
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    this.Disabled.Equals(input.Disabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaximumAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.Disabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
