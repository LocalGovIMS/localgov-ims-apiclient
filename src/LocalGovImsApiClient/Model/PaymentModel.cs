/*
 * LocalGovImsApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LocalGovImsApiClient.Client.OpenAPIDateConverter;

namespace LocalGovImsApiClient.Model
{
    /// <summary>
    /// PaymentModel
    /// </summary>
    [DataContract(Name = "PaymentModel")]
    public partial class PaymentModel : IEquatable<PaymentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentModel" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="basket">basket.</param>
        /// <param name="successUrl">successUrl.</param>
        /// <param name="cancelUrl">cancelUrl.</param>
        /// <param name="failUrl">failUrl.</param>
        /// <param name="mopCode">mopCode.</param>
        /// <param name="externalReference">externalReference.</param>
        /// <param name="callRecordingSource">callRecordingSource.</param>
        /// <param name="callRecordingUserName">callRecordingUserName.</param>
        public PaymentModel(PaymentModelAddress address = default(PaymentModelAddress), List<BasketItem> basket = default(List<BasketItem>), string successUrl = default(string), string cancelUrl = default(string), string failUrl = default(string), string mopCode = default(string), string externalReference = default(string), string callRecordingSource = default(string), string callRecordingUserName = default(string))
        {
            this.Address = address;
            this.Basket = basket;
            this.SuccessUrl = successUrl;
            this.CancelUrl = cancelUrl;
            this.FailUrl = failUrl;
            this.MopCode = mopCode;
            this.ExternalReference = externalReference;
            this.CallRecordingSource = callRecordingSource;
            this.CallRecordingUserName = callRecordingUserName;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "Address", EmitDefaultValue = true)]
        public PaymentModelAddress Address { get; set; }

        /// <summary>
        /// Gets or Sets Basket
        /// </summary>
        [DataMember(Name = "Basket", EmitDefaultValue = true)]
        public List<BasketItem> Basket { get; set; }

        /// <summary>
        /// Gets or Sets SuccessUrl
        /// </summary>
        [DataMember(Name = "SuccessUrl", EmitDefaultValue = true)]
        public string SuccessUrl { get; set; }

        /// <summary>
        /// Gets or Sets CancelUrl
        /// </summary>
        [DataMember(Name = "CancelUrl", EmitDefaultValue = true)]
        public string CancelUrl { get; set; }

        /// <summary>
        /// Gets or Sets FailUrl
        /// </summary>
        [DataMember(Name = "FailUrl", EmitDefaultValue = true)]
        public string FailUrl { get; set; }

        /// <summary>
        /// Gets or Sets MopCode
        /// </summary>
        [DataMember(Name = "MopCode", EmitDefaultValue = true)]
        public string MopCode { get; set; }

        /// <summary>
        /// Gets or Sets ExternalReference
        /// </summary>
        [DataMember(Name = "ExternalReference", EmitDefaultValue = true)]
        public string ExternalReference { get; set; }

        /// <summary>
        /// Gets or Sets CallRecordingSource
        /// </summary>
        [DataMember(Name = "CallRecordingSource", EmitDefaultValue = true)]
        public string CallRecordingSource { get; set; }

        /// <summary>
        /// Gets or Sets CallRecordingUserName
        /// </summary>
        [DataMember(Name = "CallRecordingUserName", EmitDefaultValue = true)]
        public string CallRecordingUserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentModel {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Basket: ").Append(Basket).Append("\n");
            sb.Append("  SuccessUrl: ").Append(SuccessUrl).Append("\n");
            sb.Append("  CancelUrl: ").Append(CancelUrl).Append("\n");
            sb.Append("  FailUrl: ").Append(FailUrl).Append("\n");
            sb.Append("  MopCode: ").Append(MopCode).Append("\n");
            sb.Append("  ExternalReference: ").Append(ExternalReference).Append("\n");
            sb.Append("  CallRecordingSource: ").Append(CallRecordingSource).Append("\n");
            sb.Append("  CallRecordingUserName: ").Append(CallRecordingUserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentModel);
        }

        /// <summary>
        /// Returns true if PaymentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Basket == input.Basket ||
                    this.Basket != null &&
                    input.Basket != null &&
                    this.Basket.SequenceEqual(input.Basket)
                ) && 
                (
                    this.SuccessUrl == input.SuccessUrl ||
                    (this.SuccessUrl != null &&
                    this.SuccessUrl.Equals(input.SuccessUrl))
                ) && 
                (
                    this.CancelUrl == input.CancelUrl ||
                    (this.CancelUrl != null &&
                    this.CancelUrl.Equals(input.CancelUrl))
                ) && 
                (
                    this.FailUrl == input.FailUrl ||
                    (this.FailUrl != null &&
                    this.FailUrl.Equals(input.FailUrl))
                ) && 
                (
                    this.MopCode == input.MopCode ||
                    (this.MopCode != null &&
                    this.MopCode.Equals(input.MopCode))
                ) && 
                (
                    this.ExternalReference == input.ExternalReference ||
                    (this.ExternalReference != null &&
                    this.ExternalReference.Equals(input.ExternalReference))
                ) && 
                (
                    this.CallRecordingSource == input.CallRecordingSource ||
                    (this.CallRecordingSource != null &&
                    this.CallRecordingSource.Equals(input.CallRecordingSource))
                ) && 
                (
                    this.CallRecordingUserName == input.CallRecordingUserName ||
                    (this.CallRecordingUserName != null &&
                    this.CallRecordingUserName.Equals(input.CallRecordingUserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Basket != null)
                {
                    hashCode = (hashCode * 59) + this.Basket.GetHashCode();
                }
                if (this.SuccessUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SuccessUrl.GetHashCode();
                }
                if (this.CancelUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CancelUrl.GetHashCode();
                }
                if (this.FailUrl != null)
                {
                    hashCode = (hashCode * 59) + this.FailUrl.GetHashCode();
                }
                if (this.MopCode != null)
                {
                    hashCode = (hashCode * 59) + this.MopCode.GetHashCode();
                }
                if (this.ExternalReference != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalReference.GetHashCode();
                }
                if (this.CallRecordingSource != null)
                {
                    hashCode = (hashCode * 59) + this.CallRecordingSource.GetHashCode();
                }
                if (this.CallRecordingUserName != null)
                {
                    hashCode = (hashCode * 59) + this.CallRecordingUserName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
