/*
 * LocalGovImsApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LocalGovImsApiClient.Client.OpenAPIDateConverter;

namespace LocalGovImsApiClient.Model
{
    /// <summary>
    /// BasketItem
    /// </summary>
    [DataContract(Name = "BasketItem")]
    public partial class BasketItem : IEquatable<BasketItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasketItem" /> class.
        /// </summary>
        /// <param name="fund">fund.</param>
        /// <param name="amount">amount.</param>
        /// <param name="accountReference">accountReference.</param>
        /// <param name="narrative">narrative.</param>
        /// <param name="vatCode">vatCode.</param>
        public BasketItem(string fund = default(string), decimal amount = default(decimal), string accountReference = default(string), string narrative = default(string), string vatCode = default(string))
        {
            this.Fund = fund;
            this.Amount = amount;
            this.AccountReference = accountReference;
            this.Narrative = narrative;
            this.VatCode = vatCode;
        }

        /// <summary>
        /// Gets or Sets Fund
        /// </summary>
        [DataMember(Name = "Fund", EmitDefaultValue = true)]
        public string Fund { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets AccountReference
        /// </summary>
        [DataMember(Name = "AccountReference", EmitDefaultValue = true)]
        public string AccountReference { get; set; }

        /// <summary>
        /// Gets or Sets Narrative
        /// </summary>
        [DataMember(Name = "Narrative", EmitDefaultValue = true)]
        public string Narrative { get; set; }

        /// <summary>
        /// Gets or Sets VatCode
        /// </summary>
        [DataMember(Name = "VatCode", EmitDefaultValue = true)]
        public string VatCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BasketItem {\n");
            sb.Append("  Fund: ").Append(Fund).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AccountReference: ").Append(AccountReference).Append("\n");
            sb.Append("  Narrative: ").Append(Narrative).Append("\n");
            sb.Append("  VatCode: ").Append(VatCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BasketItem);
        }

        /// <summary>
        /// Returns true if BasketItem instances are equal
        /// </summary>
        /// <param name="input">Instance of BasketItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasketItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Fund == input.Fund ||
                    (this.Fund != null &&
                    this.Fund.Equals(input.Fund))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.AccountReference == input.AccountReference ||
                    (this.AccountReference != null &&
                    this.AccountReference.Equals(input.AccountReference))
                ) && 
                (
                    this.Narrative == input.Narrative ||
                    (this.Narrative != null &&
                    this.Narrative.Equals(input.Narrative))
                ) && 
                (
                    this.VatCode == input.VatCode ||
                    (this.VatCode != null &&
                    this.VatCode.Equals(input.VatCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fund != null)
                {
                    hashCode = (hashCode * 59) + this.Fund.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.AccountReference != null)
                {
                    hashCode = (hashCode * 59) + this.AccountReference.GetHashCode();
                }
                if (this.Narrative != null)
                {
                    hashCode = (hashCode * 59) + this.Narrative.GetHashCode();
                }
                if (this.VatCode != null)
                {
                    hashCode = (hashCode * 59) + this.VatCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
