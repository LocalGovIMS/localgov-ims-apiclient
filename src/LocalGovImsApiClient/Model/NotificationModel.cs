/*
 * LocalGovImsApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LocalGovImsApiClient.Client.OpenAPIDateConverter;

namespace LocalGovImsApiClient.Model
{
    /// <summary>
    /// NotificationModel
    /// </summary>
    [DataContract(Name = "NotificationModel")]
    public partial class NotificationModel : IEquatable<NotificationModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationModel" /> class.
        /// </summary>
        /// <param name="merchantReference">merchantReference.</param>
        /// <param name="eventCode">eventCode.</param>
        /// <param name="originalReference">originalReference.</param>
        /// <param name="pspReference">pspReference.</param>
        /// <param name="eventDate">eventDate.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="success">success.</param>
        /// <param name="reason">reason.</param>
        /// <param name="operations">operations.</param>
        /// <param name="live">live.</param>
        /// <param name="processed">processed.</param>
        /// <param name="merchantAccountCode">merchantAccountCode.</param>
        /// <param name="amount">amount.</param>
        public NotificationModel(string merchantReference = default(string), string eventCode = default(string), string originalReference = default(string), string pspReference = default(string), DateTime? eventDate = default(DateTime?), string paymentMethod = default(string), bool success = default(bool), string reason = default(string), string operations = default(string), bool live = default(bool), bool processed = default(bool), string merchantAccountCode = default(string), decimal? amount = default(decimal?))
        {
            this.MerchantReference = merchantReference;
            this.EventCode = eventCode;
            this.OriginalReference = originalReference;
            this.PspReference = pspReference;
            this.EventDate = eventDate;
            this.PaymentMethod = paymentMethod;
            this.Success = success;
            this.Reason = reason;
            this.Operations = operations;
            this.Live = live;
            this.Processed = processed;
            this.MerchantAccountCode = merchantAccountCode;
            this.Amount = amount;
        }

        /// <summary>
        /// Gets or Sets MerchantReference
        /// </summary>
        [DataMember(Name = "MerchantReference", EmitDefaultValue = true)]
        public string MerchantReference { get; set; }

        /// <summary>
        /// Gets or Sets EventCode
        /// </summary>
        [DataMember(Name = "EventCode", EmitDefaultValue = true)]
        public string EventCode { get; set; }

        /// <summary>
        /// Gets or Sets OriginalReference
        /// </summary>
        [DataMember(Name = "OriginalReference", EmitDefaultValue = true)]
        public string OriginalReference { get; set; }

        /// <summary>
        /// Gets or Sets PspReference
        /// </summary>
        [DataMember(Name = "PspReference", EmitDefaultValue = true)]
        public string PspReference { get; set; }

        /// <summary>
        /// Gets or Sets EventDate
        /// </summary>
        [DataMember(Name = "EventDate", EmitDefaultValue = true)]
        public DateTime? EventDate { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "PaymentMethod", EmitDefaultValue = true)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "Success", EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name = "Reason", EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets Operations
        /// </summary>
        [DataMember(Name = "Operations", EmitDefaultValue = true)]
        public string Operations { get; set; }

        /// <summary>
        /// Gets or Sets Live
        /// </summary>
        [DataMember(Name = "Live", EmitDefaultValue = true)]
        public bool Live { get; set; }

        /// <summary>
        /// Gets or Sets Processed
        /// </summary>
        [DataMember(Name = "Processed", EmitDefaultValue = true)]
        public bool Processed { get; set; }

        /// <summary>
        /// Gets or Sets MerchantAccountCode
        /// </summary>
        [DataMember(Name = "MerchantAccountCode", EmitDefaultValue = true)]
        public string MerchantAccountCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", EmitDefaultValue = true)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotificationModel {\n");
            sb.Append("  MerchantReference: ").Append(MerchantReference).Append("\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  OriginalReference: ").Append(OriginalReference).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  Live: ").Append(Live).Append("\n");
            sb.Append("  Processed: ").Append(Processed).Append("\n");
            sb.Append("  MerchantAccountCode: ").Append(MerchantAccountCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationModel);
        }

        /// <summary>
        /// Returns true if NotificationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MerchantReference == input.MerchantReference ||
                    (this.MerchantReference != null &&
                    this.MerchantReference.Equals(input.MerchantReference))
                ) && 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.OriginalReference == input.OriginalReference ||
                    (this.OriginalReference != null &&
                    this.OriginalReference.Equals(input.OriginalReference))
                ) && 
                (
                    this.PspReference == input.PspReference ||
                    (this.PspReference != null &&
                    this.PspReference.Equals(input.PspReference))
                ) && 
                (
                    this.EventDate == input.EventDate ||
                    (this.EventDate != null &&
                    this.EventDate.Equals(input.EventDate))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Operations == input.Operations ||
                    (this.Operations != null &&
                    this.Operations.Equals(input.Operations))
                ) && 
                (
                    this.Live == input.Live ||
                    this.Live.Equals(input.Live)
                ) && 
                (
                    this.Processed == input.Processed ||
                    this.Processed.Equals(input.Processed)
                ) && 
                (
                    this.MerchantAccountCode == input.MerchantAccountCode ||
                    (this.MerchantAccountCode != null &&
                    this.MerchantAccountCode.Equals(input.MerchantAccountCode))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantReference != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantReference.GetHashCode();
                }
                if (this.EventCode != null)
                {
                    hashCode = (hashCode * 59) + this.EventCode.GetHashCode();
                }
                if (this.OriginalReference != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalReference.GetHashCode();
                }
                if (this.PspReference != null)
                {
                    hashCode = (hashCode * 59) + this.PspReference.GetHashCode();
                }
                if (this.EventDate != null)
                {
                    hashCode = (hashCode * 59) + this.EventDate.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Success.GetHashCode();
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                if (this.Operations != null)
                {
                    hashCode = (hashCode * 59) + this.Operations.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Live.GetHashCode();
                hashCode = (hashCode * 59) + this.Processed.GetHashCode();
                if (this.MerchantAccountCode != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantAccountCode.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
