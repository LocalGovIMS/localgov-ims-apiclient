/*
 * LocalGovImsApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LocalGovImsApiClient.Client.OpenAPIDateConverter;

namespace LocalGovImsApiClient.Model
{
    /// <summary>
    /// FundModel
    /// </summary>
    [DataContract(Name = "FundModel")]
    public partial class FundModel : IEquatable<FundModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundModel" /> class.
        /// </summary>
        /// <param name="fundCode">fundCode.</param>
        /// <param name="fundName">fundName.</param>
        /// <param name="useGeneralLedgerCode">useGeneralLedgerCode.</param>
        /// <param name="generalLedgerCode">generalLedgerCode.</param>
        /// <param name="isGeneralLedgerDetail">isGeneralLedgerDetail.</param>
        public FundModel(string fundCode = default(string), string fundName = default(string), bool useGeneralLedgerCode = default(bool), string generalLedgerCode = default(string), bool isGeneralLedgerDetail = default(bool))
        {
            this.FundCode = fundCode;
            this.FundName = fundName;
            this.UseGeneralLedgerCode = useGeneralLedgerCode;
            this.GeneralLedgerCode = generalLedgerCode;
            this.IsGeneralLedgerDetail = isGeneralLedgerDetail;
        }

        /// <summary>
        /// Gets or Sets FundCode
        /// </summary>
        [DataMember(Name = "FundCode", EmitDefaultValue = true)]
        public string FundCode { get; set; }

        /// <summary>
        /// Gets or Sets FundName
        /// </summary>
        [DataMember(Name = "FundName", EmitDefaultValue = true)]
        public string FundName { get; set; }

        /// <summary>
        /// Gets or Sets UseGeneralLedgerCode
        /// </summary>
        [DataMember(Name = "UseGeneralLedgerCode", EmitDefaultValue = true)]
        public bool UseGeneralLedgerCode { get; set; }

        /// <summary>
        /// Gets or Sets GeneralLedgerCode
        /// </summary>
        [DataMember(Name = "GeneralLedgerCode", EmitDefaultValue = true)]
        public string GeneralLedgerCode { get; set; }

        /// <summary>
        /// Gets or Sets IsGeneralLedgerDetail
        /// </summary>
        [DataMember(Name = "IsGeneralLedgerDetail", EmitDefaultValue = true)]
        public bool IsGeneralLedgerDetail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundModel {\n");
            sb.Append("  FundCode: ").Append(FundCode).Append("\n");
            sb.Append("  FundName: ").Append(FundName).Append("\n");
            sb.Append("  UseGeneralLedgerCode: ").Append(UseGeneralLedgerCode).Append("\n");
            sb.Append("  GeneralLedgerCode: ").Append(GeneralLedgerCode).Append("\n");
            sb.Append("  IsGeneralLedgerDetail: ").Append(IsGeneralLedgerDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundModel);
        }

        /// <summary>
        /// Returns true if FundModel instances are equal
        /// </summary>
        /// <param name="input">Instance of FundModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FundCode == input.FundCode ||
                    (this.FundCode != null &&
                    this.FundCode.Equals(input.FundCode))
                ) && 
                (
                    this.FundName == input.FundName ||
                    (this.FundName != null &&
                    this.FundName.Equals(input.FundName))
                ) && 
                (
                    this.UseGeneralLedgerCode == input.UseGeneralLedgerCode ||
                    this.UseGeneralLedgerCode.Equals(input.UseGeneralLedgerCode)
                ) && 
                (
                    this.GeneralLedgerCode == input.GeneralLedgerCode ||
                    (this.GeneralLedgerCode != null &&
                    this.GeneralLedgerCode.Equals(input.GeneralLedgerCode))
                ) && 
                (
                    this.IsGeneralLedgerDetail == input.IsGeneralLedgerDetail ||
                    this.IsGeneralLedgerDetail.Equals(input.IsGeneralLedgerDetail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FundCode != null)
                {
                    hashCode = (hashCode * 59) + this.FundCode.GetHashCode();
                }
                if (this.FundName != null)
                {
                    hashCode = (hashCode * 59) + this.FundName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseGeneralLedgerCode.GetHashCode();
                if (this.GeneralLedgerCode != null)
                {
                    hashCode = (hashCode * 59) + this.GeneralLedgerCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsGeneralLedgerDetail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
