/*
 * LocalGovImsApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LocalGovImsApiClient.Client.OpenAPIDateConverter;

namespace LocalGovImsApiClient.Model
{
    /// <summary>
    /// FundModel
    /// </summary>
    [DataContract(Name = "FundModel")]
    public partial class FundModel : IEquatable<FundModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundModel" /> class.
        /// </summary>
        /// <param name="fundCode">fundCode.</param>
        /// <param name="fundName">fundName.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="vatCode">vatCode.</param>
        /// <param name="maximumAmount">maximumAmount.</param>
        /// <param name="overPayAccount">overPayAccount.</param>
        /// <param name="accountExist">accountExist.</param>
        /// <param name="aquireAddress">aquireAddress.</param>
        /// <param name="vatOverride">vatOverride.</param>
        /// <param name="metadata">metadata.</param>
        public FundModel(string fundCode = default(string), string fundName = default(string), string displayName = default(string), string vatCode = default(string), decimal? maximumAmount = default(decimal?), bool overPayAccount = default(bool), bool accountExist = default(bool), bool aquireAddress = default(bool), bool vatOverride = default(bool), List<FundMetadataModel> metadata = default(List<FundMetadataModel>))
        {
            this.FundCode = fundCode;
            this.FundName = fundName;
            this.DisplayName = displayName;
            this.VatCode = vatCode;
            this.MaximumAmount = maximumAmount;
            this.OverPayAccount = overPayAccount;
            this.AccountExist = accountExist;
            this.AquireAddress = aquireAddress;
            this.VatOverride = vatOverride;
            this.Metadata = metadata;
        }

        /// <summary>
        /// Gets or Sets FundCode
        /// </summary>
        [DataMember(Name = "FundCode", EmitDefaultValue = true)]
        public string FundCode { get; set; }

        /// <summary>
        /// Gets or Sets FundName
        /// </summary>
        [DataMember(Name = "FundName", EmitDefaultValue = true)]
        public string FundName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "DisplayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets VatCode
        /// </summary>
        [DataMember(Name = "VatCode", EmitDefaultValue = true)]
        public string VatCode { get; set; }

        /// <summary>
        /// Gets or Sets MaximumAmount
        /// </summary>
        [DataMember(Name = "MaximumAmount", EmitDefaultValue = true)]
        public decimal? MaximumAmount { get; set; }

        /// <summary>
        /// Gets or Sets OverPayAccount
        /// </summary>
        [DataMember(Name = "OverPayAccount", EmitDefaultValue = true)]
        public bool OverPayAccount { get; set; }

        /// <summary>
        /// Gets or Sets AccountExist
        /// </summary>
        [DataMember(Name = "AccountExist", EmitDefaultValue = true)]
        public bool AccountExist { get; set; }

        /// <summary>
        /// Gets or Sets AquireAddress
        /// </summary>
        [DataMember(Name = "AquireAddress", EmitDefaultValue = true)]
        public bool AquireAddress { get; set; }

        /// <summary>
        /// Gets or Sets VatOverride
        /// </summary>
        [DataMember(Name = "VatOverride", EmitDefaultValue = true)]
        public bool VatOverride { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "Metadata", EmitDefaultValue = true)]
        public List<FundMetadataModel> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundModel {\n");
            sb.Append("  FundCode: ").Append(FundCode).Append("\n");
            sb.Append("  FundName: ").Append(FundName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  VatCode: ").Append(VatCode).Append("\n");
            sb.Append("  MaximumAmount: ").Append(MaximumAmount).Append("\n");
            sb.Append("  OverPayAccount: ").Append(OverPayAccount).Append("\n");
            sb.Append("  AccountExist: ").Append(AccountExist).Append("\n");
            sb.Append("  AquireAddress: ").Append(AquireAddress).Append("\n");
            sb.Append("  VatOverride: ").Append(VatOverride).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundModel);
        }

        /// <summary>
        /// Returns true if FundModel instances are equal
        /// </summary>
        /// <param name="input">Instance of FundModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FundCode == input.FundCode ||
                    (this.FundCode != null &&
                    this.FundCode.Equals(input.FundCode))
                ) && 
                (
                    this.FundName == input.FundName ||
                    (this.FundName != null &&
                    this.FundName.Equals(input.FundName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.VatCode == input.VatCode ||
                    (this.VatCode != null &&
                    this.VatCode.Equals(input.VatCode))
                ) && 
                (
                    this.MaximumAmount == input.MaximumAmount ||
                    (this.MaximumAmount != null &&
                    this.MaximumAmount.Equals(input.MaximumAmount))
                ) && 
                (
                    this.OverPayAccount == input.OverPayAccount ||
                    this.OverPayAccount.Equals(input.OverPayAccount)
                ) && 
                (
                    this.AccountExist == input.AccountExist ||
                    this.AccountExist.Equals(input.AccountExist)
                ) && 
                (
                    this.AquireAddress == input.AquireAddress ||
                    this.AquireAddress.Equals(input.AquireAddress)
                ) && 
                (
                    this.VatOverride == input.VatOverride ||
                    this.VatOverride.Equals(input.VatOverride)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FundCode != null)
                {
                    hashCode = (hashCode * 59) + this.FundCode.GetHashCode();
                }
                if (this.FundName != null)
                {
                    hashCode = (hashCode * 59) + this.FundName.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.VatCode != null)
                {
                    hashCode = (hashCode * 59) + this.VatCode.GetHashCode();
                }
                if (this.MaximumAmount != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumAmount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OverPayAccount.GetHashCode();
                hashCode = (hashCode * 59) + this.AccountExist.GetHashCode();
                hashCode = (hashCode * 59) + this.AquireAddress.GetHashCode();
                hashCode = (hashCode * 59) + this.VatOverride.GetHashCode();
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
