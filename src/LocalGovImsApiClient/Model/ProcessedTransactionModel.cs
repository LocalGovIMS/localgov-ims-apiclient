/*
 * LocalGovImsApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LocalGovImsApiClient.Client.OpenAPIDateConverter;

namespace LocalGovImsApiClient.Model
{
    /// <summary>
    /// ProcessedTransactionModel
    /// </summary>
    [DataContract(Name = "ProcessedTransactionModel")]
    public partial class ProcessedTransactionModel : IEquatable<ProcessedTransactionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessedTransactionModel" /> class.
        /// </summary>
        /// <param name="reference">reference.</param>
        /// <param name="internalReference">internalReference.</param>
        /// <param name="pspReference">pspReference.</param>
        /// <param name="officeCode">officeCode.</param>
        /// <param name="entryDate">entryDate.</param>
        /// <param name="transactionDate">transactionDate.</param>
        /// <param name="accountReference">accountReference.</param>
        /// <param name="userCode">userCode.</param>
        /// <param name="fundCode">fundCode.</param>
        /// <param name="mopCode">mopCode.</param>
        /// <param name="amount">amount.</param>
        /// <param name="vatCode">vatCode.</param>
        /// <param name="vatRate">vatRate.</param>
        /// <param name="vatAmount">vatAmount.</param>
        /// <param name="narrative">narrative.</param>
        /// <param name="importId">importId.</param>
        public ProcessedTransactionModel(string reference = default(string), string internalReference = default(string), string pspReference = default(string), string officeCode = default(string), DateTime? entryDate = default(DateTime?), DateTime? transactionDate = default(DateTime?), string accountReference = default(string), int userCode = default(int), string fundCode = default(string), string mopCode = default(string), decimal? amount = default(decimal?), string vatCode = default(string), float vatRate = default(float), decimal? vatAmount = default(decimal?), string narrative = default(string), int? importId = default(int?))
        {
            this.Reference = reference;
            this.InternalReference = internalReference;
            this.PspReference = pspReference;
            this.OfficeCode = officeCode;
            this.EntryDate = entryDate;
            this.TransactionDate = transactionDate;
            this.AccountReference = accountReference;
            this.UserCode = userCode;
            this.FundCode = fundCode;
            this.MopCode = mopCode;
            this.Amount = amount;
            this.VatCode = vatCode;
            this.VatRate = vatRate;
            this.VatAmount = vatAmount;
            this.Narrative = narrative;
            this.ImportId = importId;
        }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "Reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets InternalReference
        /// </summary>
        [DataMember(Name = "InternalReference", EmitDefaultValue = true)]
        public string InternalReference { get; set; }

        /// <summary>
        /// Gets or Sets PspReference
        /// </summary>
        [DataMember(Name = "PspReference", EmitDefaultValue = true)]
        public string PspReference { get; set; }

        /// <summary>
        /// Gets or Sets OfficeCode
        /// </summary>
        [DataMember(Name = "OfficeCode", EmitDefaultValue = true)]
        public string OfficeCode { get; set; }

        /// <summary>
        /// Gets or Sets EntryDate
        /// </summary>
        [DataMember(Name = "EntryDate", EmitDefaultValue = true)]
        public DateTime? EntryDate { get; set; }

        /// <summary>
        /// Gets or Sets TransactionDate
        /// </summary>
        [DataMember(Name = "TransactionDate", EmitDefaultValue = true)]
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// Gets or Sets AccountReference
        /// </summary>
        [DataMember(Name = "AccountReference", EmitDefaultValue = true)]
        public string AccountReference { get; set; }

        /// <summary>
        /// Gets or Sets UserCode
        /// </summary>
        [DataMember(Name = "UserCode", EmitDefaultValue = false)]
        public int UserCode { get; set; }

        /// <summary>
        /// Gets or Sets FundCode
        /// </summary>
        [DataMember(Name = "FundCode", EmitDefaultValue = true)]
        public string FundCode { get; set; }

        /// <summary>
        /// Gets or Sets MopCode
        /// </summary>
        [DataMember(Name = "MopCode", EmitDefaultValue = true)]
        public string MopCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", EmitDefaultValue = true)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets VatCode
        /// </summary>
        [DataMember(Name = "VatCode", EmitDefaultValue = true)]
        public string VatCode { get; set; }

        /// <summary>
        /// Gets or Sets VatRate
        /// </summary>
        [DataMember(Name = "VatRate", EmitDefaultValue = false)]
        public float VatRate { get; set; }

        /// <summary>
        /// Gets or Sets VatAmount
        /// </summary>
        [DataMember(Name = "VatAmount", EmitDefaultValue = true)]
        public decimal? VatAmount { get; set; }

        /// <summary>
        /// Gets or Sets Narrative
        /// </summary>
        [DataMember(Name = "Narrative", EmitDefaultValue = true)]
        public string Narrative { get; set; }

        /// <summary>
        /// Gets or Sets ImportId
        /// </summary>
        [DataMember(Name = "ImportId", EmitDefaultValue = true)]
        public int? ImportId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessedTransactionModel {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  InternalReference: ").Append(InternalReference).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  OfficeCode: ").Append(OfficeCode).Append("\n");
            sb.Append("  EntryDate: ").Append(EntryDate).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  AccountReference: ").Append(AccountReference).Append("\n");
            sb.Append("  UserCode: ").Append(UserCode).Append("\n");
            sb.Append("  FundCode: ").Append(FundCode).Append("\n");
            sb.Append("  MopCode: ").Append(MopCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  VatCode: ").Append(VatCode).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  Narrative: ").Append(Narrative).Append("\n");
            sb.Append("  ImportId: ").Append(ImportId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessedTransactionModel);
        }

        /// <summary>
        /// Returns true if ProcessedTransactionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessedTransactionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessedTransactionModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.InternalReference == input.InternalReference ||
                    (this.InternalReference != null &&
                    this.InternalReference.Equals(input.InternalReference))
                ) && 
                (
                    this.PspReference == input.PspReference ||
                    (this.PspReference != null &&
                    this.PspReference.Equals(input.PspReference))
                ) && 
                (
                    this.OfficeCode == input.OfficeCode ||
                    (this.OfficeCode != null &&
                    this.OfficeCode.Equals(input.OfficeCode))
                ) && 
                (
                    this.EntryDate == input.EntryDate ||
                    (this.EntryDate != null &&
                    this.EntryDate.Equals(input.EntryDate))
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.AccountReference == input.AccountReference ||
                    (this.AccountReference != null &&
                    this.AccountReference.Equals(input.AccountReference))
                ) && 
                (
                    this.UserCode == input.UserCode ||
                    this.UserCode.Equals(input.UserCode)
                ) && 
                (
                    this.FundCode == input.FundCode ||
                    (this.FundCode != null &&
                    this.FundCode.Equals(input.FundCode))
                ) && 
                (
                    this.MopCode == input.MopCode ||
                    (this.MopCode != null &&
                    this.MopCode.Equals(input.MopCode))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.VatCode == input.VatCode ||
                    (this.VatCode != null &&
                    this.VatCode.Equals(input.VatCode))
                ) && 
                (
                    this.VatRate == input.VatRate ||
                    this.VatRate.Equals(input.VatRate)
                ) && 
                (
                    this.VatAmount == input.VatAmount ||
                    (this.VatAmount != null &&
                    this.VatAmount.Equals(input.VatAmount))
                ) && 
                (
                    this.Narrative == input.Narrative ||
                    (this.Narrative != null &&
                    this.Narrative.Equals(input.Narrative))
                ) && 
                (
                    this.ImportId == input.ImportId ||
                    (this.ImportId != null &&
                    this.ImportId.Equals(input.ImportId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.InternalReference != null)
                {
                    hashCode = (hashCode * 59) + this.InternalReference.GetHashCode();
                }
                if (this.PspReference != null)
                {
                    hashCode = (hashCode * 59) + this.PspReference.GetHashCode();
                }
                if (this.OfficeCode != null)
                {
                    hashCode = (hashCode * 59) + this.OfficeCode.GetHashCode();
                }
                if (this.EntryDate != null)
                {
                    hashCode = (hashCode * 59) + this.EntryDate.GetHashCode();
                }
                if (this.TransactionDate != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionDate.GetHashCode();
                }
                if (this.AccountReference != null)
                {
                    hashCode = (hashCode * 59) + this.AccountReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserCode.GetHashCode();
                if (this.FundCode != null)
                {
                    hashCode = (hashCode * 59) + this.FundCode.GetHashCode();
                }
                if (this.MopCode != null)
                {
                    hashCode = (hashCode * 59) + this.MopCode.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.VatCode != null)
                {
                    hashCode = (hashCode * 59) + this.VatCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VatRate.GetHashCode();
                if (this.VatAmount != null)
                {
                    hashCode = (hashCode * 59) + this.VatAmount.GetHashCode();
                }
                if (this.Narrative != null)
                {
                    hashCode = (hashCode * 59) + this.Narrative.GetHashCode();
                }
                if (this.ImportId != null)
                {
                    hashCode = (hashCode * 59) + this.ImportId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
