/*
 * LocalGovImsApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = LocalGovImsApiClient.Client.OpenAPIDateConverter;

namespace LocalGovImsApiClient.Model
{
    /// <summary>
    /// PendingTransactionModel
    /// </summary>
    [DataContract(Name = "PendingTransactionModel")]
    public partial class PendingTransactionModel : IEquatable<PendingTransactionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PendingTransactionModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="reference">reference.</param>
        /// <param name="internalReference">internalReference.</param>
        /// <param name="officeCode">officeCode.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="transactionDate">transactionDate.</param>
        /// <param name="accountReference">accountReference.</param>
        /// <param name="userCode">userCode.</param>
        /// <param name="fundCode">fundCode.</param>
        /// <param name="mopCode">mopCode.</param>
        /// <param name="amount">amount.</param>
        /// <param name="vatCode">vatCode.</param>
        /// <param name="vatRate">vatRate.</param>
        /// <param name="vatAmount">vatAmount.</param>
        /// <param name="narrative">narrative.</param>
        /// <param name="batchReference">batchReference.</param>
        /// <param name="externalReference">externalReference.</param>
        /// <param name="payeeName">payeeName.</param>
        /// <param name="payeeBusinessName">payeeBusinessName.</param>
        /// <param name="payeePremiseNumber">payeePremiseNumber.</param>
        /// <param name="payeePremiseName">payeePremiseName.</param>
        /// <param name="payeeStreet">payeeStreet.</param>
        /// <param name="payeeArea">payeeArea.</param>
        /// <param name="payeeTown">payeeTown.</param>
        /// <param name="payeeCounty">payeeCounty.</param>
        /// <param name="payeePostCode">payeePostCode.</param>
        /// <param name="successUrl">successUrl.</param>
        /// <param name="cancelUrl">cancelUrl.</param>
        /// <param name="failUrl">failUrl.</param>
        /// <param name="expiryDate">expiryDate.</param>
        /// <param name="statusId">statusId.</param>
        public PendingTransactionModel(int id = default(int), string reference = default(string), string internalReference = default(string), string officeCode = default(string), DateTime? createdDate = default(DateTime?), DateTime? transactionDate = default(DateTime?), string accountReference = default(string), int userCode = default(int), string fundCode = default(string), string mopCode = default(string), decimal? amount = default(decimal?), string vatCode = default(string), float vatRate = default(float), decimal? vatAmount = default(decimal?), string narrative = default(string), string batchReference = default(string), string externalReference = default(string), string payeeName = default(string), string payeeBusinessName = default(string), string payeePremiseNumber = default(string), string payeePremiseName = default(string), string payeeStreet = default(string), string payeeArea = default(string), string payeeTown = default(string), string payeeCounty = default(string), string payeePostCode = default(string), string successUrl = default(string), string cancelUrl = default(string), string failUrl = default(string), DateTime? expiryDate = default(DateTime?), int statusId = default(int))
        {
            this.Id = id;
            this.Reference = reference;
            this.InternalReference = internalReference;
            this.OfficeCode = officeCode;
            this.CreatedDate = createdDate;
            this.TransactionDate = transactionDate;
            this.AccountReference = accountReference;
            this.UserCode = userCode;
            this.FundCode = fundCode;
            this.MopCode = mopCode;
            this.Amount = amount;
            this.VatCode = vatCode;
            this.VatRate = vatRate;
            this.VatAmount = vatAmount;
            this.Narrative = narrative;
            this.BatchReference = batchReference;
            this.ExternalReference = externalReference;
            this.PayeeName = payeeName;
            this.PayeeBusinessName = payeeBusinessName;
            this.PayeePremiseNumber = payeePremiseNumber;
            this.PayeePremiseName = payeePremiseName;
            this.PayeeStreet = payeeStreet;
            this.PayeeArea = payeeArea;
            this.PayeeTown = payeeTown;
            this.PayeeCounty = payeeCounty;
            this.PayeePostCode = payeePostCode;
            this.SuccessUrl = successUrl;
            this.CancelUrl = cancelUrl;
            this.FailUrl = failUrl;
            this.ExpiryDate = expiryDate;
            this.StatusId = statusId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "Reference", EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets InternalReference
        /// </summary>
        [DataMember(Name = "InternalReference", EmitDefaultValue = true)]
        public string InternalReference { get; set; }

        /// <summary>
        /// Gets or Sets OfficeCode
        /// </summary>
        [DataMember(Name = "OfficeCode", EmitDefaultValue = true)]
        public string OfficeCode { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "CreatedDate", EmitDefaultValue = true)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets TransactionDate
        /// </summary>
        [DataMember(Name = "TransactionDate", EmitDefaultValue = true)]
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// Gets or Sets AccountReference
        /// </summary>
        [DataMember(Name = "AccountReference", EmitDefaultValue = true)]
        public string AccountReference { get; set; }

        /// <summary>
        /// Gets or Sets UserCode
        /// </summary>
        [DataMember(Name = "UserCode", EmitDefaultValue = false)]
        public int UserCode { get; set; }

        /// <summary>
        /// Gets or Sets FundCode
        /// </summary>
        [DataMember(Name = "FundCode", EmitDefaultValue = true)]
        public string FundCode { get; set; }

        /// <summary>
        /// Gets or Sets MopCode
        /// </summary>
        [DataMember(Name = "MopCode", EmitDefaultValue = true)]
        public string MopCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", EmitDefaultValue = true)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets VatCode
        /// </summary>
        [DataMember(Name = "VatCode", EmitDefaultValue = true)]
        public string VatCode { get; set; }

        /// <summary>
        /// Gets or Sets VatRate
        /// </summary>
        [DataMember(Name = "VatRate", EmitDefaultValue = false)]
        public float VatRate { get; set; }

        /// <summary>
        /// Gets or Sets VatAmount
        /// </summary>
        [DataMember(Name = "VatAmount", EmitDefaultValue = true)]
        public decimal? VatAmount { get; set; }

        /// <summary>
        /// Gets or Sets Narrative
        /// </summary>
        [DataMember(Name = "Narrative", EmitDefaultValue = true)]
        public string Narrative { get; set; }

        /// <summary>
        /// Gets or Sets BatchReference
        /// </summary>
        [DataMember(Name = "BatchReference", EmitDefaultValue = true)]
        public string BatchReference { get; set; }

        /// <summary>
        /// Gets or Sets ExternalReference
        /// </summary>
        [DataMember(Name = "ExternalReference", EmitDefaultValue = true)]
        public string ExternalReference { get; set; }

        /// <summary>
        /// Gets or Sets PayeeName
        /// </summary>
        [DataMember(Name = "PayeeName", EmitDefaultValue = true)]
        public string PayeeName { get; set; }

        /// <summary>
        /// Gets or Sets PayeeBusinessName
        /// </summary>
        [DataMember(Name = "PayeeBusinessName", EmitDefaultValue = true)]
        public string PayeeBusinessName { get; set; }

        /// <summary>
        /// Gets or Sets PayeePremiseNumber
        /// </summary>
        [DataMember(Name = "PayeePremiseNumber", EmitDefaultValue = true)]
        public string PayeePremiseNumber { get; set; }

        /// <summary>
        /// Gets or Sets PayeePremiseName
        /// </summary>
        [DataMember(Name = "PayeePremiseName", EmitDefaultValue = true)]
        public string PayeePremiseName { get; set; }

        /// <summary>
        /// Gets or Sets PayeeStreet
        /// </summary>
        [DataMember(Name = "PayeeStreet", EmitDefaultValue = true)]
        public string PayeeStreet { get; set; }

        /// <summary>
        /// Gets or Sets PayeeArea
        /// </summary>
        [DataMember(Name = "PayeeArea", EmitDefaultValue = true)]
        public string PayeeArea { get; set; }

        /// <summary>
        /// Gets or Sets PayeeTown
        /// </summary>
        [DataMember(Name = "PayeeTown", EmitDefaultValue = true)]
        public string PayeeTown { get; set; }

        /// <summary>
        /// Gets or Sets PayeeCounty
        /// </summary>
        [DataMember(Name = "PayeeCounty", EmitDefaultValue = true)]
        public string PayeeCounty { get; set; }

        /// <summary>
        /// Gets or Sets PayeePostCode
        /// </summary>
        [DataMember(Name = "PayeePostCode", EmitDefaultValue = true)]
        public string PayeePostCode { get; set; }

        /// <summary>
        /// Gets or Sets SuccessUrl
        /// </summary>
        [DataMember(Name = "SuccessUrl", EmitDefaultValue = true)]
        public string SuccessUrl { get; set; }

        /// <summary>
        /// Gets or Sets CancelUrl
        /// </summary>
        [DataMember(Name = "CancelUrl", EmitDefaultValue = true)]
        public string CancelUrl { get; set; }

        /// <summary>
        /// Gets or Sets FailUrl
        /// </summary>
        [DataMember(Name = "FailUrl", EmitDefaultValue = true)]
        public string FailUrl { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [DataMember(Name = "ExpiryDate", EmitDefaultValue = true)]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets StatusId
        /// </summary>
        [DataMember(Name = "StatusId", EmitDefaultValue = false)]
        public int StatusId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PendingTransactionModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  InternalReference: ").Append(InternalReference).Append("\n");
            sb.Append("  OfficeCode: ").Append(OfficeCode).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  AccountReference: ").Append(AccountReference).Append("\n");
            sb.Append("  UserCode: ").Append(UserCode).Append("\n");
            sb.Append("  FundCode: ").Append(FundCode).Append("\n");
            sb.Append("  MopCode: ").Append(MopCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  VatCode: ").Append(VatCode).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  Narrative: ").Append(Narrative).Append("\n");
            sb.Append("  BatchReference: ").Append(BatchReference).Append("\n");
            sb.Append("  ExternalReference: ").Append(ExternalReference).Append("\n");
            sb.Append("  PayeeName: ").Append(PayeeName).Append("\n");
            sb.Append("  PayeeBusinessName: ").Append(PayeeBusinessName).Append("\n");
            sb.Append("  PayeePremiseNumber: ").Append(PayeePremiseNumber).Append("\n");
            sb.Append("  PayeePremiseName: ").Append(PayeePremiseName).Append("\n");
            sb.Append("  PayeeStreet: ").Append(PayeeStreet).Append("\n");
            sb.Append("  PayeeArea: ").Append(PayeeArea).Append("\n");
            sb.Append("  PayeeTown: ").Append(PayeeTown).Append("\n");
            sb.Append("  PayeeCounty: ").Append(PayeeCounty).Append("\n");
            sb.Append("  PayeePostCode: ").Append(PayeePostCode).Append("\n");
            sb.Append("  SuccessUrl: ").Append(SuccessUrl).Append("\n");
            sb.Append("  CancelUrl: ").Append(CancelUrl).Append("\n");
            sb.Append("  FailUrl: ").Append(FailUrl).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PendingTransactionModel);
        }

        /// <summary>
        /// Returns true if PendingTransactionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PendingTransactionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PendingTransactionModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.InternalReference == input.InternalReference ||
                    (this.InternalReference != null &&
                    this.InternalReference.Equals(input.InternalReference))
                ) && 
                (
                    this.OfficeCode == input.OfficeCode ||
                    (this.OfficeCode != null &&
                    this.OfficeCode.Equals(input.OfficeCode))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.AccountReference == input.AccountReference ||
                    (this.AccountReference != null &&
                    this.AccountReference.Equals(input.AccountReference))
                ) && 
                (
                    this.UserCode == input.UserCode ||
                    this.UserCode.Equals(input.UserCode)
                ) && 
                (
                    this.FundCode == input.FundCode ||
                    (this.FundCode != null &&
                    this.FundCode.Equals(input.FundCode))
                ) && 
                (
                    this.MopCode == input.MopCode ||
                    (this.MopCode != null &&
                    this.MopCode.Equals(input.MopCode))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.VatCode == input.VatCode ||
                    (this.VatCode != null &&
                    this.VatCode.Equals(input.VatCode))
                ) && 
                (
                    this.VatRate == input.VatRate ||
                    this.VatRate.Equals(input.VatRate)
                ) && 
                (
                    this.VatAmount == input.VatAmount ||
                    (this.VatAmount != null &&
                    this.VatAmount.Equals(input.VatAmount))
                ) && 
                (
                    this.Narrative == input.Narrative ||
                    (this.Narrative != null &&
                    this.Narrative.Equals(input.Narrative))
                ) && 
                (
                    this.BatchReference == input.BatchReference ||
                    (this.BatchReference != null &&
                    this.BatchReference.Equals(input.BatchReference))
                ) && 
                (
                    this.ExternalReference == input.ExternalReference ||
                    (this.ExternalReference != null &&
                    this.ExternalReference.Equals(input.ExternalReference))
                ) && 
                (
                    this.PayeeName == input.PayeeName ||
                    (this.PayeeName != null &&
                    this.PayeeName.Equals(input.PayeeName))
                ) && 
                (
                    this.PayeeBusinessName == input.PayeeBusinessName ||
                    (this.PayeeBusinessName != null &&
                    this.PayeeBusinessName.Equals(input.PayeeBusinessName))
                ) && 
                (
                    this.PayeePremiseNumber == input.PayeePremiseNumber ||
                    (this.PayeePremiseNumber != null &&
                    this.PayeePremiseNumber.Equals(input.PayeePremiseNumber))
                ) && 
                (
                    this.PayeePremiseName == input.PayeePremiseName ||
                    (this.PayeePremiseName != null &&
                    this.PayeePremiseName.Equals(input.PayeePremiseName))
                ) && 
                (
                    this.PayeeStreet == input.PayeeStreet ||
                    (this.PayeeStreet != null &&
                    this.PayeeStreet.Equals(input.PayeeStreet))
                ) && 
                (
                    this.PayeeArea == input.PayeeArea ||
                    (this.PayeeArea != null &&
                    this.PayeeArea.Equals(input.PayeeArea))
                ) && 
                (
                    this.PayeeTown == input.PayeeTown ||
                    (this.PayeeTown != null &&
                    this.PayeeTown.Equals(input.PayeeTown))
                ) && 
                (
                    this.PayeeCounty == input.PayeeCounty ||
                    (this.PayeeCounty != null &&
                    this.PayeeCounty.Equals(input.PayeeCounty))
                ) && 
                (
                    this.PayeePostCode == input.PayeePostCode ||
                    (this.PayeePostCode != null &&
                    this.PayeePostCode.Equals(input.PayeePostCode))
                ) && 
                (
                    this.SuccessUrl == input.SuccessUrl ||
                    (this.SuccessUrl != null &&
                    this.SuccessUrl.Equals(input.SuccessUrl))
                ) && 
                (
                    this.CancelUrl == input.CancelUrl ||
                    (this.CancelUrl != null &&
                    this.CancelUrl.Equals(input.CancelUrl))
                ) && 
                (
                    this.FailUrl == input.FailUrl ||
                    (this.FailUrl != null &&
                    this.FailUrl.Equals(input.FailUrl))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.StatusId == input.StatusId ||
                    this.StatusId.Equals(input.StatusId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.InternalReference != null)
                {
                    hashCode = (hashCode * 59) + this.InternalReference.GetHashCode();
                }
                if (this.OfficeCode != null)
                {
                    hashCode = (hashCode * 59) + this.OfficeCode.GetHashCode();
                }
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.TransactionDate != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionDate.GetHashCode();
                }
                if (this.AccountReference != null)
                {
                    hashCode = (hashCode * 59) + this.AccountReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserCode.GetHashCode();
                if (this.FundCode != null)
                {
                    hashCode = (hashCode * 59) + this.FundCode.GetHashCode();
                }
                if (this.MopCode != null)
                {
                    hashCode = (hashCode * 59) + this.MopCode.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.VatCode != null)
                {
                    hashCode = (hashCode * 59) + this.VatCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VatRate.GetHashCode();
                if (this.VatAmount != null)
                {
                    hashCode = (hashCode * 59) + this.VatAmount.GetHashCode();
                }
                if (this.Narrative != null)
                {
                    hashCode = (hashCode * 59) + this.Narrative.GetHashCode();
                }
                if (this.BatchReference != null)
                {
                    hashCode = (hashCode * 59) + this.BatchReference.GetHashCode();
                }
                if (this.ExternalReference != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalReference.GetHashCode();
                }
                if (this.PayeeName != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeName.GetHashCode();
                }
                if (this.PayeeBusinessName != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeBusinessName.GetHashCode();
                }
                if (this.PayeePremiseNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PayeePremiseNumber.GetHashCode();
                }
                if (this.PayeePremiseName != null)
                {
                    hashCode = (hashCode * 59) + this.PayeePremiseName.GetHashCode();
                }
                if (this.PayeeStreet != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeStreet.GetHashCode();
                }
                if (this.PayeeArea != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeArea.GetHashCode();
                }
                if (this.PayeeTown != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeTown.GetHashCode();
                }
                if (this.PayeeCounty != null)
                {
                    hashCode = (hashCode * 59) + this.PayeeCounty.GetHashCode();
                }
                if (this.PayeePostCode != null)
                {
                    hashCode = (hashCode * 59) + this.PayeePostCode.GetHashCode();
                }
                if (this.SuccessUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SuccessUrl.GetHashCode();
                }
                if (this.CancelUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CancelUrl.GetHashCode();
                }
                if (this.FailUrl != null)
                {
                    hashCode = (hashCode * 59) + this.FailUrl.GetHashCode();
                }
                if (this.ExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiryDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatusId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // OfficeCode (string) maxLength
            if (this.OfficeCode != null && this.OfficeCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OfficeCode, length must be less than 2.", new [] { "OfficeCode" });
            }

            // OfficeCode (string) minLength
            if (this.OfficeCode != null && this.OfficeCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OfficeCode, length must be greater than 0.", new [] { "OfficeCode" });
            }

            // AccountReference (string) maxLength
            if (this.AccountReference != null && this.AccountReference.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountReference, length must be less than 30.", new [] { "AccountReference" });
            }

            // AccountReference (string) minLength
            if (this.AccountReference != null && this.AccountReference.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountReference, length must be greater than 0.", new [] { "AccountReference" });
            }

            // FundCode (string) maxLength
            if (this.FundCode != null && this.FundCode.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FundCode, length must be less than 5.", new [] { "FundCode" });
            }

            // FundCode (string) minLength
            if (this.FundCode != null && this.FundCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FundCode, length must be greater than 0.", new [] { "FundCode" });
            }

            // MopCode (string) maxLength
            if (this.MopCode != null && this.MopCode.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MopCode, length must be less than 5.", new [] { "MopCode" });
            }

            // MopCode (string) minLength
            if (this.MopCode != null && this.MopCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MopCode, length must be greater than 0.", new [] { "MopCode" });
            }

            // VatCode (string) maxLength
            if (this.VatCode != null && this.VatCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VatCode, length must be less than 2.", new [] { "VatCode" });
            }

            // VatCode (string) minLength
            if (this.VatCode != null && this.VatCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VatCode, length must be greater than 0.", new [] { "VatCode" });
            }

            // Narrative (string) maxLength
            if (this.Narrative != null && this.Narrative.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Narrative, length must be less than 100.", new [] { "Narrative" });
            }

            // Narrative (string) minLength
            if (this.Narrative != null && this.Narrative.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Narrative, length must be greater than 0.", new [] { "Narrative" });
            }

            // BatchReference (string) maxLength
            if (this.BatchReference != null && this.BatchReference.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BatchReference, length must be less than 30.", new [] { "BatchReference" });
            }

            // BatchReference (string) minLength
            if (this.BatchReference != null && this.BatchReference.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BatchReference, length must be greater than 0.", new [] { "BatchReference" });
            }

            // ExternalReference (string) maxLength
            if (this.ExternalReference != null && this.ExternalReference.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalReference, length must be less than 100.", new [] { "ExternalReference" });
            }

            // ExternalReference (string) minLength
            if (this.ExternalReference != null && this.ExternalReference.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalReference, length must be greater than 0.", new [] { "ExternalReference" });
            }

            // PayeeName (string) maxLength
            if (this.PayeeName != null && this.PayeeName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeName, length must be less than 50.", new [] { "PayeeName" });
            }

            // PayeeName (string) minLength
            if (this.PayeeName != null && this.PayeeName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeName, length must be greater than 0.", new [] { "PayeeName" });
            }

            // PayeeBusinessName (string) maxLength
            if (this.PayeeBusinessName != null && this.PayeeBusinessName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeBusinessName, length must be less than 100.", new [] { "PayeeBusinessName" });
            }

            // PayeeBusinessName (string) minLength
            if (this.PayeeBusinessName != null && this.PayeeBusinessName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeBusinessName, length must be greater than 0.", new [] { "PayeeBusinessName" });
            }

            // PayeePremiseNumber (string) maxLength
            if (this.PayeePremiseNumber != null && this.PayeePremiseNumber.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeePremiseNumber, length must be less than 50.", new [] { "PayeePremiseNumber" });
            }

            // PayeePremiseNumber (string) minLength
            if (this.PayeePremiseNumber != null && this.PayeePremiseNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeePremiseNumber, length must be greater than 0.", new [] { "PayeePremiseNumber" });
            }

            // PayeePremiseName (string) maxLength
            if (this.PayeePremiseName != null && this.PayeePremiseName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeePremiseName, length must be less than 100.", new [] { "PayeePremiseName" });
            }

            // PayeePremiseName (string) minLength
            if (this.PayeePremiseName != null && this.PayeePremiseName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeePremiseName, length must be greater than 0.", new [] { "PayeePremiseName" });
            }

            // PayeeStreet (string) maxLength
            if (this.PayeeStreet != null && this.PayeeStreet.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeStreet, length must be less than 50.", new [] { "PayeeStreet" });
            }

            // PayeeStreet (string) minLength
            if (this.PayeeStreet != null && this.PayeeStreet.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeStreet, length must be greater than 0.", new [] { "PayeeStreet" });
            }

            // PayeeArea (string) maxLength
            if (this.PayeeArea != null && this.PayeeArea.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeArea, length must be less than 50.", new [] { "PayeeArea" });
            }

            // PayeeArea (string) minLength
            if (this.PayeeArea != null && this.PayeeArea.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeArea, length must be greater than 0.", new [] { "PayeeArea" });
            }

            // PayeeTown (string) maxLength
            if (this.PayeeTown != null && this.PayeeTown.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeTown, length must be less than 50.", new [] { "PayeeTown" });
            }

            // PayeeTown (string) minLength
            if (this.PayeeTown != null && this.PayeeTown.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeTown, length must be greater than 0.", new [] { "PayeeTown" });
            }

            // PayeeCounty (string) maxLength
            if (this.PayeeCounty != null && this.PayeeCounty.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeCounty, length must be less than 50.", new [] { "PayeeCounty" });
            }

            // PayeeCounty (string) minLength
            if (this.PayeeCounty != null && this.PayeeCounty.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeeCounty, length must be greater than 0.", new [] { "PayeeCounty" });
            }

            // PayeePostCode (string) maxLength
            if (this.PayeePostCode != null && this.PayeePostCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeePostCode, length must be less than 10.", new [] { "PayeePostCode" });
            }

            // PayeePostCode (string) minLength
            if (this.PayeePostCode != null && this.PayeePostCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayeePostCode, length must be greater than 0.", new [] { "PayeePostCode" });
            }

            // CancelUrl (string) maxLength
            if (this.CancelUrl != null && this.CancelUrl.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CancelUrl, length must be less than 255.", new [] { "CancelUrl" });
            }

            // CancelUrl (string) minLength
            if (this.CancelUrl != null && this.CancelUrl.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CancelUrl, length must be greater than 0.", new [] { "CancelUrl" });
            }

            // FailUrl (string) maxLength
            if (this.FailUrl != null && this.FailUrl.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FailUrl, length must be less than 255.", new [] { "FailUrl" });
            }

            // FailUrl (string) minLength
            if (this.FailUrl != null && this.FailUrl.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FailUrl, length must be greater than 0.", new [] { "FailUrl" });
            }

            yield break;
        }
    }

}
