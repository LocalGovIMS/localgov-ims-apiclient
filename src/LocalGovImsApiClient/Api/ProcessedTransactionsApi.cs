/*
 * LocalGovImsApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using LocalGovImsApiClient.Client;
using LocalGovImsApiClient.Model;

namespace LocalGovImsApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessedTransactionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <returns>ProcessedTransactionModel</returns>
        ProcessedTransactionModel ProcessedTransactionsGet(string reference);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <returns>ApiResponse of ProcessedTransactionModel</returns>
        ApiResponse<ProcessedTransactionModel> ProcessedTransactionsGetWithHttpInfo(string reference);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processedTransactionModel"></param>
        /// <returns>ProcessedTransactionModel</returns>
        ProcessedTransactionModel ProcessedTransactionsPost(ProcessedTransactionModel processedTransactionModel);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processedTransactionModel"></param>
        /// <returns>ApiResponse of ProcessedTransactionModel</returns>
        ApiResponse<ProcessedTransactionModel> ProcessedTransactionsPostWithHttpInfo(ProcessedTransactionModel processedTransactionModel);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiptNumber"> (optional)</param>
        /// <param name="fundCodes"> (optional)</param>
        /// <param name="accountReference"> (optional)</param>
        /// <param name="amount"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="appReference"> (optional)</param>
        /// <param name="mopCodes"> (optional)</param>
        /// <param name="narrative"> (optional)</param>
        /// <param name="internalReference"> (optional)</param>
        /// <param name="pspReference"> (optional)</param>
        /// <returns>List&lt;ProcessedTransactionModel&gt;</returns>
        List<ProcessedTransactionModel> ProcessedTransactionsSearch(string receiptNumber = default(string), List<string> fundCodes = default(List<string>), string accountReference = default(string), decimal? amount = default(decimal?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string appReference = default(string), List<string> mopCodes = default(List<string>), string narrative = default(string), string internalReference = default(string), string pspReference = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiptNumber"> (optional)</param>
        /// <param name="fundCodes"> (optional)</param>
        /// <param name="accountReference"> (optional)</param>
        /// <param name="amount"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="appReference"> (optional)</param>
        /// <param name="mopCodes"> (optional)</param>
        /// <param name="narrative"> (optional)</param>
        /// <param name="internalReference"> (optional)</param>
        /// <param name="pspReference"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProcessedTransactionModel&gt;</returns>
        ApiResponse<List<ProcessedTransactionModel>> ProcessedTransactionsSearchWithHttpInfo(string receiptNumber = default(string), List<string> fundCodes = default(List<string>), string accountReference = default(string), decimal? amount = default(decimal?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string appReference = default(string), List<string> mopCodes = default(List<string>), string narrative = default(string), string internalReference = default(string), string pspReference = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessedTransactionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedTransactionModel</returns>
        System.Threading.Tasks.Task<ProcessedTransactionModel> ProcessedTransactionsGetAsync(string reference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedTransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedTransactionModel>> ProcessedTransactionsGetWithHttpInfoAsync(string reference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processedTransactionModel"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedTransactionModel</returns>
        System.Threading.Tasks.Task<ProcessedTransactionModel> ProcessedTransactionsPostAsync(ProcessedTransactionModel processedTransactionModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processedTransactionModel"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedTransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessedTransactionModel>> ProcessedTransactionsPostWithHttpInfoAsync(ProcessedTransactionModel processedTransactionModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiptNumber"> (optional)</param>
        /// <param name="fundCodes"> (optional)</param>
        /// <param name="accountReference"> (optional)</param>
        /// <param name="amount"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="appReference"> (optional)</param>
        /// <param name="mopCodes"> (optional)</param>
        /// <param name="narrative"> (optional)</param>
        /// <param name="internalReference"> (optional)</param>
        /// <param name="pspReference"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProcessedTransactionModel&gt;</returns>
        System.Threading.Tasks.Task<List<ProcessedTransactionModel>> ProcessedTransactionsSearchAsync(string receiptNumber = default(string), List<string> fundCodes = default(List<string>), string accountReference = default(string), decimal? amount = default(decimal?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string appReference = default(string), List<string> mopCodes = default(List<string>), string narrative = default(string), string internalReference = default(string), string pspReference = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiptNumber"> (optional)</param>
        /// <param name="fundCodes"> (optional)</param>
        /// <param name="accountReference"> (optional)</param>
        /// <param name="amount"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="appReference"> (optional)</param>
        /// <param name="mopCodes"> (optional)</param>
        /// <param name="narrative"> (optional)</param>
        /// <param name="internalReference"> (optional)</param>
        /// <param name="pspReference"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessedTransactionModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProcessedTransactionModel>>> ProcessedTransactionsSearchWithHttpInfoAsync(string receiptNumber = default(string), List<string> fundCodes = default(List<string>), string accountReference = default(string), decimal? amount = default(decimal?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string appReference = default(string), List<string> mopCodes = default(List<string>), string narrative = default(string), string internalReference = default(string), string pspReference = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessedTransactionsApi : IProcessedTransactionsApiSync, IProcessedTransactionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProcessedTransactionsApi : IProcessedTransactionsApi
    {
        private LocalGovImsApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessedTransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessedTransactionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessedTransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessedTransactionsApi(string basePath)
        {
            this.Configuration = LocalGovImsApiClient.Client.Configuration.MergeConfigurations(
                LocalGovImsApiClient.Client.GlobalConfiguration.Instance,
                new LocalGovImsApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new LocalGovImsApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new LocalGovImsApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = LocalGovImsApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessedTransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessedTransactionsApi(LocalGovImsApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = LocalGovImsApiClient.Client.Configuration.MergeConfigurations(
                LocalGovImsApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new LocalGovImsApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new LocalGovImsApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = LocalGovImsApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessedTransactionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProcessedTransactionsApi(LocalGovImsApiClient.Client.ISynchronousClient client, LocalGovImsApiClient.Client.IAsynchronousClient asyncClient, LocalGovImsApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = LocalGovImsApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public LocalGovImsApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public LocalGovImsApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LocalGovImsApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LocalGovImsApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <returns>ProcessedTransactionModel</returns>
        public ProcessedTransactionModel ProcessedTransactionsGet(string reference)
        {
            LocalGovImsApiClient.Client.ApiResponse<ProcessedTransactionModel> localVarResponse = ProcessedTransactionsGetWithHttpInfo(reference);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <returns>ApiResponse of ProcessedTransactionModel</returns>
        public LocalGovImsApiClient.Client.ApiResponse<ProcessedTransactionModel> ProcessedTransactionsGetWithHttpInfo(string reference)
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new LocalGovImsApiClient.Client.ApiException(400, "Missing required parameter 'reference' when calling ProcessedTransactionsApi->ProcessedTransactionsGet");
            }

            LocalGovImsApiClient.Client.RequestOptions localVarRequestOptions = new LocalGovImsApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LocalGovImsApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LocalGovImsApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reference", LocalGovImsApiClient.Client.ClientUtils.ParameterToString(reference)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProcessedTransactionModel>("/api/ProcessedTransactions/{reference}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessedTransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedTransactionModel</returns>
        public async System.Threading.Tasks.Task<ProcessedTransactionModel> ProcessedTransactionsGetAsync(string reference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LocalGovImsApiClient.Client.ApiResponse<ProcessedTransactionModel> localVarResponse = await ProcessedTransactionsGetWithHttpInfoAsync(reference, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedTransactionModel)</returns>
        public async System.Threading.Tasks.Task<LocalGovImsApiClient.Client.ApiResponse<ProcessedTransactionModel>> ProcessedTransactionsGetWithHttpInfoAsync(string reference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new LocalGovImsApiClient.Client.ApiException(400, "Missing required parameter 'reference' when calling ProcessedTransactionsApi->ProcessedTransactionsGet");
            }


            LocalGovImsApiClient.Client.RequestOptions localVarRequestOptions = new LocalGovImsApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LocalGovImsApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LocalGovImsApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reference", LocalGovImsApiClient.Client.ClientUtils.ParameterToString(reference)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProcessedTransactionModel>("/api/ProcessedTransactions/{reference}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessedTransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processedTransactionModel"></param>
        /// <returns>ProcessedTransactionModel</returns>
        public ProcessedTransactionModel ProcessedTransactionsPost(ProcessedTransactionModel processedTransactionModel)
        {
            LocalGovImsApiClient.Client.ApiResponse<ProcessedTransactionModel> localVarResponse = ProcessedTransactionsPostWithHttpInfo(processedTransactionModel);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processedTransactionModel"></param>
        /// <returns>ApiResponse of ProcessedTransactionModel</returns>
        public LocalGovImsApiClient.Client.ApiResponse<ProcessedTransactionModel> ProcessedTransactionsPostWithHttpInfo(ProcessedTransactionModel processedTransactionModel)
        {
            // verify the required parameter 'processedTransactionModel' is set
            if (processedTransactionModel == null)
            {
                throw new LocalGovImsApiClient.Client.ApiException(400, "Missing required parameter 'processedTransactionModel' when calling ProcessedTransactionsApi->ProcessedTransactionsPost");
            }

            LocalGovImsApiClient.Client.RequestOptions localVarRequestOptions = new LocalGovImsApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LocalGovImsApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LocalGovImsApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processedTransactionModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessedTransactionModel>("/api/ProcessedTransactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessedTransactionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processedTransactionModel"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessedTransactionModel</returns>
        public async System.Threading.Tasks.Task<ProcessedTransactionModel> ProcessedTransactionsPostAsync(ProcessedTransactionModel processedTransactionModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LocalGovImsApiClient.Client.ApiResponse<ProcessedTransactionModel> localVarResponse = await ProcessedTransactionsPostWithHttpInfoAsync(processedTransactionModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processedTransactionModel"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessedTransactionModel)</returns>
        public async System.Threading.Tasks.Task<LocalGovImsApiClient.Client.ApiResponse<ProcessedTransactionModel>> ProcessedTransactionsPostWithHttpInfoAsync(ProcessedTransactionModel processedTransactionModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'processedTransactionModel' is set
            if (processedTransactionModel == null)
            {
                throw new LocalGovImsApiClient.Client.ApiException(400, "Missing required parameter 'processedTransactionModel' when calling ProcessedTransactionsApi->ProcessedTransactionsPost");
            }


            LocalGovImsApiClient.Client.RequestOptions localVarRequestOptions = new LocalGovImsApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LocalGovImsApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LocalGovImsApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processedTransactionModel;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessedTransactionModel>("/api/ProcessedTransactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessedTransactionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiptNumber"> (optional)</param>
        /// <param name="fundCodes"> (optional)</param>
        /// <param name="accountReference"> (optional)</param>
        /// <param name="amount"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="appReference"> (optional)</param>
        /// <param name="mopCodes"> (optional)</param>
        /// <param name="narrative"> (optional)</param>
        /// <param name="internalReference"> (optional)</param>
        /// <param name="pspReference"> (optional)</param>
        /// <returns>List&lt;ProcessedTransactionModel&gt;</returns>
        public List<ProcessedTransactionModel> ProcessedTransactionsSearch(string receiptNumber = default(string), List<string> fundCodes = default(List<string>), string accountReference = default(string), decimal? amount = default(decimal?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string appReference = default(string), List<string> mopCodes = default(List<string>), string narrative = default(string), string internalReference = default(string), string pspReference = default(string))
        {
            LocalGovImsApiClient.Client.ApiResponse<List<ProcessedTransactionModel>> localVarResponse = ProcessedTransactionsSearchWithHttpInfo(receiptNumber, fundCodes, accountReference, amount, startDate, endDate, appReference, mopCodes, narrative, internalReference, pspReference);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiptNumber"> (optional)</param>
        /// <param name="fundCodes"> (optional)</param>
        /// <param name="accountReference"> (optional)</param>
        /// <param name="amount"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="appReference"> (optional)</param>
        /// <param name="mopCodes"> (optional)</param>
        /// <param name="narrative"> (optional)</param>
        /// <param name="internalReference"> (optional)</param>
        /// <param name="pspReference"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProcessedTransactionModel&gt;</returns>
        public LocalGovImsApiClient.Client.ApiResponse<List<ProcessedTransactionModel>> ProcessedTransactionsSearchWithHttpInfo(string receiptNumber = default(string), List<string> fundCodes = default(List<string>), string accountReference = default(string), decimal? amount = default(decimal?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string appReference = default(string), List<string> mopCodes = default(List<string>), string narrative = default(string), string internalReference = default(string), string pspReference = default(string))
        {
            LocalGovImsApiClient.Client.RequestOptions localVarRequestOptions = new LocalGovImsApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LocalGovImsApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LocalGovImsApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (receiptNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "ReceiptNumber", receiptNumber));
            }
            if (fundCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "FundCodes", fundCodes));
            }
            if (accountReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "AccountReference", accountReference));
            }
            if (amount != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "Amount", amount));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "StartDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "EndDate", endDate));
            }
            if (appReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "AppReference", appReference));
            }
            if (mopCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "MopCodes", mopCodes));
            }
            if (narrative != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "Narrative", narrative));
            }
            if (internalReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "InternalReference", internalReference));
            }
            if (pspReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "PspReference", pspReference));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ProcessedTransactionModel>>("/api/ProcessedTransactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessedTransactionsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiptNumber"> (optional)</param>
        /// <param name="fundCodes"> (optional)</param>
        /// <param name="accountReference"> (optional)</param>
        /// <param name="amount"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="appReference"> (optional)</param>
        /// <param name="mopCodes"> (optional)</param>
        /// <param name="narrative"> (optional)</param>
        /// <param name="internalReference"> (optional)</param>
        /// <param name="pspReference"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProcessedTransactionModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProcessedTransactionModel>> ProcessedTransactionsSearchAsync(string receiptNumber = default(string), List<string> fundCodes = default(List<string>), string accountReference = default(string), decimal? amount = default(decimal?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string appReference = default(string), List<string> mopCodes = default(List<string>), string narrative = default(string), string internalReference = default(string), string pspReference = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LocalGovImsApiClient.Client.ApiResponse<List<ProcessedTransactionModel>> localVarResponse = await ProcessedTransactionsSearchWithHttpInfoAsync(receiptNumber, fundCodes, accountReference, amount, startDate, endDate, appReference, mopCodes, narrative, internalReference, pspReference, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="LocalGovImsApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="receiptNumber"> (optional)</param>
        /// <param name="fundCodes"> (optional)</param>
        /// <param name="accountReference"> (optional)</param>
        /// <param name="amount"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="appReference"> (optional)</param>
        /// <param name="mopCodes"> (optional)</param>
        /// <param name="narrative"> (optional)</param>
        /// <param name="internalReference"> (optional)</param>
        /// <param name="pspReference"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessedTransactionModel&gt;)</returns>
        public async System.Threading.Tasks.Task<LocalGovImsApiClient.Client.ApiResponse<List<ProcessedTransactionModel>>> ProcessedTransactionsSearchWithHttpInfoAsync(string receiptNumber = default(string), List<string> fundCodes = default(List<string>), string accountReference = default(string), decimal? amount = default(decimal?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string appReference = default(string), List<string> mopCodes = default(List<string>), string narrative = default(string), string internalReference = default(string), string pspReference = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LocalGovImsApiClient.Client.RequestOptions localVarRequestOptions = new LocalGovImsApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LocalGovImsApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = LocalGovImsApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (receiptNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "ReceiptNumber", receiptNumber));
            }
            if (fundCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "FundCodes", fundCodes));
            }
            if (accountReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "AccountReference", accountReference));
            }
            if (amount != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "Amount", amount));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "StartDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "EndDate", endDate));
            }
            if (appReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "AppReference", appReference));
            }
            if (mopCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "MopCodes", mopCodes));
            }
            if (narrative != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "Narrative", narrative));
            }
            if (internalReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "InternalReference", internalReference));
            }
            if (pspReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(LocalGovImsApiClient.Client.ClientUtils.ParameterToMultiMap("", "PspReference", pspReference));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ProcessedTransactionModel>>("/api/ProcessedTransactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessedTransactionsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
